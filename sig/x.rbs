module X
  VERSION: Gem::Version

  class BearerTokenAuthenticator
    attr_accessor bearer_token: String
    def initialize: (String bearer_token) -> void
    def header: (Net::HTTPRequest _request) -> String
  end

  class OauthAuthenticator
    OAUTH_VERSION: String
    OAUTH_SIGNATURE_METHOD: String
    OAUTH_SIGNATURE_ALGORITHM: String

    attr_accessor api_key: String
    attr_accessor api_key_secret: String
    attr_accessor access_token: String
    attr_accessor access_token_secret: String
    def initialize: (String api_key, String api_key_secret, String access_token, String access_token_secret) -> void
    def header: (Net::HTTPRequest request) -> String

    private
    def parse_request: (Net::HTTPRequest request) -> [String, String, Hash[String, String]]
    def parse_query_params: (String query_string) -> Hash[String, String]
    def uri_without_query: (URI::Generic uri) -> String
    def build_oauth_header: (String method, String url, Hash[String, String] query_params) -> String
    def default_oauth_params: -> Hash[String, String]
    def generate_signature: (String method, String url, Hash[String, String] params) -> String
    def hmac_signature: (String base_string) -> String
    def signature_base_string: (String method, String url, Hash[String, String] params) -> String
    def encode_params: (Hash[String, String] params) -> String
    def signing_key: -> String
    def format_oauth_header: (Hash[String, String] params) -> String
    def encode: (String value) -> String
  end

  class Error < StandardError
    JSON_CONTENT_TYPE_REGEXP: Regexp

    attr_reader object: Hash[String, untyped]
    def initialize: (String msg, response: Net::HTTPResponse) -> void

    private
    def json_response?: (Net::HTTPResponse response) -> bool
  end

  class ClientError < Error
  end

  class BadRequestError < ClientError
  end

  class AuthenticationError < ClientError
  end

  class ForbiddenError < ClientError
  end

  class NotFoundError < ClientError
  end

  class TooManyRedirectsError < ClientError
  end

  class TooManyRequestsError < ClientError
    @response: Net::HTTPResponse

    def initialize: (String msg, response: Net::HTTPResponse) -> void
    def limit: -> Integer
    def remaining: -> Integer
    def reset_at: -> Time
    def reset_in: -> Integer?
  end

  class ServerError < Error
  end

  class ServiceUnavailableError < ServerError
  end

  class NetworkError < Error
  end

  class Connection
    DEFAULT_BASE_URL: String
    DEFAULT_HOST: String
    DEFAULT_PORT: Integer
    DEFAULT_OPEN_TIMEOUT: Integer
    DEFAULT_READ_TIMEOUT: Integer
    DEFAULT_WRITE_TIMEOUT: Integer
    NETWORK_ERRORS: Array[(singleton(::Errno::ECONNREFUSED) | singleton(::Net::OpenTimeout) | singleton(::Net::ReadTimeout))]
    extend Forwardable
    @http_client: Net::HTTP

    attr_reader base_uri: URI::Generic
    attr_reader proxy_uri: URI::Generic?
    attr_reader open_timeout : Float | Integer
    attr_reader read_timeout : Float | Integer
    attr_reader write_timeout : Float | Integer
    def initialize: (?base_url: URI::Generic | String, ?open_timeout: Float | Integer, ?read_timeout: Float | Integer, ?write_timeout: Float | Integer, ?proxy_url: URI::Generic? | String?, ?debug_output: IO?) -> void
    def send_request: (Net::HTTPRequest request) -> Net::HTTPResponse
    def base_uri=: (URI::Generic | String base_url) -> void
    def debug_output: -> IO?

    private
    def apply_http_client_settings: (open_timeout: Float | Integer, read_timeout: Float | Integer, write_timeout: Float | Integer, debug_output: IO?) -> untyped
    def current_http_client_settings: -> {open_timeout: Float | Integer, read_timeout: Float | Integer, write_timeout: Float | Integer, debug_output: IO?}
    def update_http_client_settings: -> untyped
    def build_http_client: (host: String, port: Integer) -> (Net::HTTP)
    def conditionally_apply_http_client_settings: { -> untyped } -> untyped
  end

  class RequestBuilder
    HTTP_METHODS: Hash[::Symbol, (singleton(::Net::HTTP::Get) | singleton(::Net::HTTP::Post) | singleton(::Net::HTTP::Put) | singleton(::Net::HTTP::Delete))]
    DEFAULT_CONTENT_TYPE: String
    DEFAULT_USER_AGENT: String
    AUTHORIZATION_HEADER: String
    CONTENT_TYPE_HEADER: String
    USER_AGENT_HEADER: String

    attr_accessor content_type: String
    attr_accessor user_agent: String
    def initialize: (?content_type: String, ?user_agent: String) -> void
    def build: (BearerTokenAuthenticator | OauthAuthenticator authenticator, Symbol http_method, URI::Generic url, ?body: String?) -> (Net::HTTPRequest)

    private
    def create_request: (Symbol http_method, URI::Generic url, String? body) -> (Net::HTTPRequest)
    def add_authorization: (Net::HTTPRequest request, BearerTokenAuthenticator | OauthAuthenticator authenticator) -> void
    def add_content_type: (Net::HTTPRequest request) -> void
    def add_user_agent: (Net::HTTPRequest request) -> void
  end

  class RedirectHandler
    DEFAULT_MAX_REDIRECTS: Integer

    attr_reader authenticator: BearerTokenAuthenticator | OauthAuthenticator
    attr_reader connection: Connection
    attr_reader request_builder: RequestBuilder
    attr_reader max_redirects: Integer
    def initialize: (BearerTokenAuthenticator | OauthAuthenticator authenticator, Connection connection, RequestBuilder request_builder, ?max_redirects: Integer) -> void
    def handle_redirects: (Net::HTTPResponse response, Net::HTTPRequest original_request, URI::Generic | String original_base_url, ?Integer redirect_count) -> Net::HTTPResponse

    private
    def build_new_uri: (Net::HTTPResponse response, URI::Generic | String original_base_url) -> URI::Generic
    def build_request: (Net::HTTPRequest original_request, URI::Generic new_uri) -> Net::HTTPRequest
    def send_new_request: (URI::Generic new_uri, Net::HTTPRequest new_request) -> Net::HTTPResponse
  end

  class ResponseHandler
    DEFAULT_ARRAY_CLASS: Class
    DEFAULT_OBJECT_CLASS: Class
    ERROR_CLASSES: Hash[Integer, singleton(AuthenticationError) | singleton(BadRequestError) | singleton(ForbiddenError) | singleton(NotFoundError) | singleton(ServerError) | singleton(ServiceUnavailableError) | singleton(TooManyRequestsError)]
    JSON_CONTENT_TYPE_REGEXP: Regexp

    attr_accessor array_class: Class
    attr_accessor object_class: Class
    def initialize: (?array_class: Class, ?object_class: Class) -> void
    def handle: (Net::HTTPResponse response) -> Hash[String, untyped]

    private
    def successful_json_response?: (Net::HTTPResponse response) -> bool
  end

  class Client
    extend Forwardable
    @authenticator: BearerTokenAuthenticator | OauthAuthenticator
    @connection: Connection
    @request_builder: RequestBuilder
    @redirect_handler: RedirectHandler
    @response_handler: ResponseHandler

    attr_reader base_uri: URI::Generic
    def initialize: (?bearer_token: String?, ?api_key: String?, ?api_key_secret: String?, ?access_token: String?, ?access_token_secret: String?, ?base_url: URI::Generic | String, ?content_type: String, ?user_agent: String, ?open_timeout: Float | Integer, ?read_timeout: Float | Integer, ?write_timeout: Float | Integer, ?proxy_url: URI::Generic? | String?, ?debug_output: IO?, ?array_class: Class, ?object_class: Class, ?max_redirects: Integer) -> void
    def get: (String endpoint) -> Hash[String, untyped]
    def post: (String endpoint, ?nil body) -> Hash[String, untyped]
    def put: (String endpoint, ?nil body) -> Hash[String, untyped]
    def delete: (String endpoint) -> Hash[String, untyped]

    private
    def initialize_authenticator: (String? bearer_token, String? api_key, String? api_key_secret, String? access_token, String? access_token_secret) -> (BearerTokenAuthenticator | OauthAuthenticator)
    def send_request: (Symbol http_method, String endpoint, ?nil body) -> Hash[String, untyped]
  end
end
